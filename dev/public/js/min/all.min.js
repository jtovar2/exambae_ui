var exambae = angular.module('exambae', ['ngMaterial', 'ngAnimate', 'ngMessages', 'ngAria', 'ui.router']);

(function(app) {
    app.config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {

        $urlRouterProvider.otherwise('/');

        $stateProvider.state('newexam', {
		url: '/newexam',
		templateUrl: 'partials/newexam-partial.html',
		controller: 'newexamController'
	})

	.state('home', {
            url: '/',
            templateUrl: 'partials/home-partial.html',
            controller: 'HomeController',
            controllerAs: "vm"
        });
    }]);
})(exambae);

(function(app) {
	app.factory('SearchFactory', [function() {


		var services = {
                // Get Calls
                getSchools: getSchools,
                getClasses: getClasses,
                getExams: getExams
            };

        function getSchools()
        {
        	var schools = ['Georgia State University', 'University of Georgia', 'Clayton State University', 'Georgia Southern']
        	return schools.map( function (school) {
				        return {
				          value: school.toLowerCase(),
				          display: school
				        };
    			})
        }

        function getClasses(school)
        {
        	var classes = ['PHYS1001', 'PHYS1001', 'CSC4101', 'CSC3000'];
        	return classes.map( function (school) {
				        return {
				          value: school.toLowerCase(),
				          display: school
				        };
    			})
        }

        function getExams(school, classname)
        {
        	return [{'description': 'calc 1 test'}, {'description': 'calc 1 test'}, {'description': 'calc 1 test'}];
        }


		return services;
	}]);
})(exambae);

(function(app) {
	app.controller('HeaderController', ['$scope', '$state', '$rootScope', function($scope, $state, $rootScope) {

		var vm = this;
		
		vm.state = "home";

		/* Ok soo on changeSuccess is called when the switch to a state was done. So current will give you the previous one
			Lol just dont change bruh*/
		$rootScope.$on('$stateChangeSuccess', 
			function(event, toState, toParams, fromState, fromParams){
			    vm.state = $state.current.name;
		});
	}]);
})(exambae);

(function(app) {
	app.controller('HomeController', ['$scope', 'SearchFactory', function($scope, SearchFactory) {
		 var vm = this;

	vm.loading = true;
	vm.isSchoolSearchDisabled = false;
    vm.isSchoolCacheDisabled = false;

	vm.schoolHasBeenSelected = false;
	vm.schools = SearchFactory.getSchools();
	vm.searchSchool = "";
	vm.selectedSchool = "";
	vm.selectedSchoolChange = selectedSchoolChange;
	vm.searchSchoolChange = searchSchoolChange;

	vm.schoolQuerySearch = schoolQuerySearch;


    function searchSchoolChange(text) {

    	vm.schoolHasBeenSelected = false;
    	console.log("search method");
    	console.log(vm);
    }

    function selectedSchoolChange(item) {

    	if(vm.selectedSchool == null || vm.selectedSchool === "")
    	{
    		vm.schoolHasBeenSelected = false
    	}
    	else
    	{
    		vm.schoolHasBeenSelected = true;
    	}
    	console.log("selection method");
    	console.log(vm);
    }

    function schoolQuerySearch (query) {
      var results = query ? vm.schools.filter( createFilterFor(query) ) : vm.schools;

        return results;

    }
    vm.isClassSearchDisabled = false;
    vm.isClassCacheDisabled = false;
    vm.classHasBeenSelected = false;
    vm.searchClass = "";
    vm.classQuerySearch = classQuerySearch;
	vm.schoolClasess = SearchFactory.getClasses();
	vm.selectedClass = "";
	vm.selectedClassChange = selectedClassChange;
	vm.searchClassChange = searchClassChange;

	


    function searchClassChange(text) {

    	vm.classHasBeenSelected = false;
    }

    function selectedClassChange(item) {

    	vm.classHasBeenSelected = true;
    }

    function classQuerySearch (query) {
      var results = query ? vm.schoolClasess.filter( createFilterFor(query) ) : vm.schoolClasess;

        return results;
    }


	



	






    vm.newState = newState;


    function newState(state) {
      alert("Sorry! You'll need to create a Constitution for " + state + " first!");
    }

    // ******************************
    // Internal methods
    // ******************************

    /**
     * Search for states... use $timeout to simulate
     * remote dataservice call.
     */
    function querySearch (query) {
    	console.log(vm.schoolClasses);
      var results = query ? vm.schoolClasses.filter( createFilterFor(query) ) : vm.schoolClasses,
          deferred;
      if (vm.simulateQuery) {
        deferred = $q.defer();
        $timeout(function () { deferred.resolve( results ); }, Math.random() * 1000, false);
        return deferred.promise;
      } else {

        return results;
      }
    }

    function searchTextChange(text) {
//      console.log(text);
    }


    /**
     * Create filter function for a query string
     */
    function createFilterFor(query) {
      var lowercaseQuery = angular.lowercase(query);

      return function filterFn(state) {
      	return (state.value.indexOf(lowercaseQuery) === 0);
      };

    }


	}]);
})(exambae);

(function(app) {
	app.controller('newexamController', ['$scope', function($scope) {

	}]);
})(exambae);

(function(app) {
	app.directive('errorDirective', [ function() {
		return {
			scope: {},
			controller: function($scope, $element, $attrs, $transclude) {
				var numberOfTexts = 2;
				var randomTextNumber = Math.floor(Math.random() * numberOfTexts);

				var numberOfGiphies = 7;
				var randomGiphyNumber = Math.floor(Math.random() * numberOfGiphies);
				$scope.random = randomGiphyNumber;
				$scope.randomText = randomTextNumber;
			},
			// require: 'ngModel',
			// restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			 templateUrl: 'partials/error-view-partial.html',
			// replace: true,
			// transclude: true,
			link: function($scope, elem, attrs, controller) {}
		};
	}]);
})(exambae);

(function(app) {
	app.directive('examDirective', [ function() {
		return {
			scope: {
				exam: '='
			},
			controller: function($scope, $element, $attrs, $transclude) {
				$scope.uploadFile = function(){
				console.log("uploading");
            	var file = $scope.blob;

            }
		},
			// require: 'ngModel',
			//restrict: 'EA', // E = Element, A = Attribute, C = Class, M = Comment
			//template: '<h1>Heyyy this a directive</h1>',
			templateUrl: 'partials/exam-directive.html',
			replace: true,
			// transclude: true,
			link: function($scope, elem, attrs, controller) {
				
				
			}
		};
	}]);
})(exambae);

(function(app) {
	app.directive('loadingDirective', [function() {
		return {
			scope: {},
			controller: function($scope, $element, $attrs, $transclude) {
				var numberOfTexts = 2;
				var randomTextNumber = Math.floor(Math.random() * numberOfTexts);

				var numberOfGiphies = 8;
				var randomGiphyNumber = Math.floor(Math.random() * numberOfGiphies);
				$scope.random = randomGiphyNumber;
				$scope.randomText = randomTextNumber;
			},
			// require: 'ngModel',
			// restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			 templateUrl: 'partials/loading-view-partial.html',
			// replace: true,
			// transclude: true,
			link: function($scope, elem, attrs, controller) {}
		};
	}]);
})(exambae);

(function(app) {
	app.directive('successDirective', [ function() {
		return {
			scope: {},
			controller: function($scope, $element, $attrs, $transclude) {
				var numberOfTexts = 2;
				var randomTextNumber = Math.floor(Math.random() * numberOfTexts);

				var numberOfGiphies = 7;
				var randomGiphyNumber = Math.floor(Math.random() * numberOfGiphies);
				$scope.random = randomGiphyNumber;
				$scope.randomText = randomTextNumber;
			},
			// require: 'ngModel',
			// restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			 templateUrl: 'partials/success-view-partial.html',
			// replace: true,
			// transclude: true,
			link: function($scope, elem, attrs, controller) {}
		};
	}]);
})(exambae);
