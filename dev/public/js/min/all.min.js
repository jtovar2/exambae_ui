var exambae = angular.module('exambae', ['ngMaterial', 'ngAnimate', 'ngMessages', 'ngAria', 'ui.router']);

(function(app) {
    app.config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {

        $urlRouterProvider.otherwise('/');

        $stateProvider.state('viewexam', {
		url: '/exam/:examId',
		templateUrl: 'partials/viewexam-partial.html',
		controller: 'viewexamController',
		controllerAs: 'vm'
	})

	.state('examreceipt', {
		url: '/exam/:examId/secret/:secret',
		templateUrl: 'partials/examreceipt-partial.html',
		controller: 'examreceiptController',
		controllerAs: 'vm'
	})

	.state('newexam', {
		url: '/newexam',
		templateUrl: 'partials/newexam-partial.html',
		controller: 'newexamController',
        controllerAs: 'vm'
	})

	.state('home', {
            url: '/',
            templateUrl: 'partials/home-partial.html',
            controller: 'HomeController',
            controllerAs: "vm"
        });
    }]);
})(exambae);

(function(app) {
	app.factory('ExamFactory', ['$q', '$http', function($q, $http) {

		var services = {
			getExam: getExam,
            getExamWithSecret: getExamWithSecret,
			postExam: postExam,

            getUploadUrl: getUploadUrl,
            deleteBlob: deleteBlob,
            createBlob: createBlob,
            getBlobDownloadUrl: getBlobDownloadUrl


		}
		var qa_base_address = "http://demolisherapp.appspot.com";
        var pr_base_address = "";

		function success(data) {

            console.log(data);

            return $q.resolve(data.data);
        }

        function error(error) {
            console.log(error);
            console.log("There was an error");


            return $q.reject(error);
        }


        function getBlobDownloadUrl(blobKey)
        {
            return qa_base_address + '/blob/' + blobKey;
        }
        function createBlob(file, uploadUrl)
        {

            var fd = new FormData();
            fd.append('file', file);
            return $http.post(uploadUrl, fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            }).then(success, error);
        }

        function deleteBlob(blob_key)
        {
            var path_to_blob_api = qa_base_address + "/blob/" + blob_key;
            return $http.delete(path_to_blob_api)
            .then(success, error);
        }

        function getUploadUrl()
        {
            var path_to_get_upload_url = qa_base_address + '/generate_blobstore_url';
            return $http.get(path_to_get_upload_url).then(success, error);
        }

        function getExam(exam_id)
        {

            var get_exam_path = '/exam/' + exam_id;
  
            return $http.get(qa_base_address + get_exam_path).then(success, error);
        }

        function getExamWithSecret(exam_id, secret)
        {

            var get_exam_path = '/exam/' + exam_id + '/secret/' + secret;
  
            return $http.get(qa_base_address + get_exam_path).then(success, error);
        }

        function postExam(exam)
        {
            var post_exam_path = '/exam';

            

        
              return $http.post(qa_base_address + post_exam_path, exam).then(success, error);
        }

		return services;
	}]);
})(exambae);

(function(app) {
	app.factory('SearchFactory', ['$q', '$http', function($q, $http) {


		var services = {
                // Get Calls
                getSchools: getSchools,
                getClasses: getClasses,
                getExams: getExams
            };

        var qa_base_address = "http://demolisherapp.appspot.com";


        function success(data) {

            console.log(data);

            return $q.resolve(data.data);
        }

        function error(error) {
            console.log(error);
            console.log("There was an error");


            return $q.reject(error);
        }

        function getSchools()
        {

            var get_schools_path = '/frontend/get_schools';

            

        	var schools = ['Georgia State University', 'University of Georgia', 'Clayton State University', 'Georgia Southern']
        	/*return schools.map( function (school) {
				        return {
				          value: school.toLowerCase(),
				          display: school
				        };
    			})*/
            return $http.get(qa_base_address + get_schools_path).then(success, error);
        }

        function getClasses(school)
        {

            var get_classes_path = '/frontend/school/' + school.display + '/get_classes'
            return $http.get(qa_base_address + get_classes_path).then(success, error);


        }

        function getExams(school, classname)
        {
            var get_exams_path =  '/frontend/school/' + school.display + '/school_class/' + classname.display + '/get_resources';

            return $http.get(qa_base_address + get_exams_path).then(success, error);

        }


		return services;
	}]);
})(exambae);

(function(app) {
	app.controller('examreceiptController', ['$scope', '$stateParams', 'ExamFactory', function($scope, $stateParams, ExamFactory) {

		var vm = this;
		vm.loading = true;

		vm.exam = {};


		if('secret' in $stateParams && 'examId' in $stateParams)
		{
			ExamFactory.getExamWithSecret($stateParams.examId, $stateParams.secret).then(updateExam);
		}

		function updateExam(data)
		{
			vm.exam = data;
			console.log(data);
			vm.loading = false;
		}
	}]);
})(exambae);

(function(app) {
	app.controller('HeaderController', ['$scope', '$state', '$rootScope', function($scope, $state, $rootScope) {

		var vm = this;
		
		vm.state = "home";

		/* Ok soo on changeSuccess is called when the switch to a state was done. So current will give you the previous one
			Lol just dont change bruh*/
		$rootScope.$on('$stateChangeSuccess', 
			function(event, toState, toParams, fromState, fromParams){
			    vm.state = $state.current.name;
		});
	}]);
})(exambae);

(function(app) {
	app.controller('HomeController', ['$scope', 'SearchFactory', function($scope, SearchFactory) {
		 var vm = this;

     vm.loadingExams = true;
     vm.exams = [ {"description" : 'test1'} ];


	vm.loadingSchools = true;
	vm.isSchoolSearchDisabled = false;
    vm.isSchoolCacheDisabled = false;

	vm.schoolHasBeenSelected = false;
	vm.schools = [];
  SearchFactory.getSchools().then(updateLoadingSchools);
	vm.searchSchool = "";
	vm.selectedSchool = "";
	vm.selectedSchoolChange = selectedSchoolChange;
	vm.searchSchoolChange = searchSchoolChange;

	vm.schoolQuerySearch = schoolQuerySearch;


  function updateLoadingSchools(data) {
    vm.loadingSchools = false;
    console.log(data);
    console.log(vm.loadingSchools);
    vm.schools = data;
  }
    function searchSchoolChange(text) {

      vm.loadingClasses = true;
      vm.loadingExams = true;
    	vm.schoolHasBeenSelected = false;

      vm.schoolClasses = [];


    }

    function selectedSchoolChange(item) {

    	if(vm.selectedSchool == null || vm.selectedSchool === "")
    	{
    		vm.schoolHasBeenSelected = false;
        vm.classHasBeenSelected = false;
        vm.selectedClass = "";
        vm.loadingClasses = true;
        vm.loadingExams = true;

        vm.schoolClasses = [];
    	}
    	else
    	{
    		vm.schoolHasBeenSelected = true;
        SearchFactory.getClasses(vm.selectedSchool).then(updateLoadingClasses);
    	}
    	console.log("selection method");
    	console.log(vm);
    }

    function schoolQuerySearch (query) {
      console.log(vm.schools);
      var results = query || query == "" ? vm.schools.filter( createFilterFor(query) ) : vm.schools;

        return results;

    }

    vm.loadingClasses = true;
    vm.isClassSearchDisabled = false;
    vm.isClassCacheDisabled = true;
    vm.classHasBeenSelected = false;
    vm.searchClass = "";
    vm.classQuerySearch = classQuerySearch;
	vm.schoolClasses = [];
	vm.selectedClass = "";
	vm.selectedClassChange = selectedClassChange;
	vm.searchClassChange = searchClassChange;



	

    function updateLoadingClasses(data) {
    vm.loadingClasses = false;
    console.log(data);
    vm.schoolClasses = data;
    }
    function searchClassChange(text) {
      console.log(vm.schoolClasses);
    	vm.classHasBeenSelected = false;
      vm.loadingExams = true;
    }

    function selectedClassChange(item) {
      if(vm.selectedClass === null || vm.selectedClass === "")
      {
        vm.classHasBeenSelected = false
        vm.loadingExams = true;
      }
      else
      {
        vm.classHasBeenSelected = true;
        SearchFactory.getExams(vm.selectedSchool, vm.selectedClass).then(updateLoadingExams);
      }



    }

    function updateLoadingExams(data)
    {
      vm.loadingExams = false;
      console.log(vm.loadingExams);
      console.log(data);
      vm.exams = data;
      return data;
    }

    function classQuerySearch (query) {
      console.log(query);
      var results = query || query == "" ? vm.schoolClasses.filter( createFilterFor(query) ) : vm.schoolClasses;
      console.log("results");
      console.log(results);
        return results;
    }


	



	






    vm.newState = newState;


    function newState(state) {
      alert("Sorry! You'll need to create a Constitution for " + state + " first!");
    }

    // ******************************
    // Internal methods
    // ******************************

    /**
     * Search for states... use $timeout to simulate
     * remote dataservice call.
     */
    function querySearch (query) {
    	console.log(vm.schoolClasses);
      var results = query ? vm.schoolClasses.filter( createFilterFor(query) ) : vm.schoolClasses,
          deferred;
      if (vm.simulateQuery) {
        deferred = $q.defer();
        $timeout(function () { deferred.resolve( results ); }, Math.random() * 1000, false);
        return deferred.promise;
      } else {

        return results;
      }
    }

    function searchTextChange(text) {
//      console.log(text);
    }


    /**
     * Create filter function for a query string
     */
    function createFilterFor(query) {
      var lowercaseQuery = angular.lowercase(query);

      return function filterFn(state) {
      	return (state.value.indexOf(lowercaseQuery) === 0);
      };

    }


	}]);
})(exambae);

(function(app) {
	app.controller('newexamController', ['$scope', 'ExamFactory', '$state', function($scope, ExamFactory, $state) {
		var vm = this;

		vm.NO_FILE_UPLOADED = "NO_FILES";
		vm.FILE_UPLOADED = "FILE";
		vm.uploadButtonState = vm.NO_FILE_UPLOADED;

		vm.fileUploaded = false;

		vm.uploadUrlLoading = true;
		vm.uploadUrl = ExamFactory.getUploadUrl().then(updateUploadUrl);


		vm.fileUploaded = false;
		vm.uploadFile = uploadFile;
		vm.deleteFile = deleteFile;
		vm.metaDataForm = {};


		vm.exam = {};
		vm.exam.school = "";
		vm.exam.school_class = "";
		vm.exam.professor = "";
		vm.exam.file = "";
		vm.exam.description = "";
		vm.exam.free_or_nah = true;
		vm.exam.price = 0.00;
		vm.exam.number_of_downloads = 0;
		vm.exam.tags = [];

		vm.postExam = postExam;

		function uploadFile()
		{
			//TODO
			var file = document.getElementById('file').files[0];
			ExamFactory.createBlob(file, vm.uploadUrl).then(updateBlobKey);
		}

		function updateBlobKey(data)
		{
			vm.exam.file = data.blob_key;
			vm.fileUploaded = true;
		}

		function updateUploadUrl(data)
		{
			vm.uploadUrlLoading = false;
			vm.uploadUrl = data;
		}

		function deleteFile()
		{
			ExamFactory.deleteBlob(vm.exam.file);
			vm.exam.file = "";
			vm.fileUploaded = false;
		}

		function postExam()
		{
			ExamFactory.postExam(vm.exam).then(goToExamReceipt);


		}


		function goToExamReceipt(data)
		{
			if('secret' in data && 'id' in data)
			{
				$state.go('examreceipt', {'examId' : data.id, 'secret': data.secret});
			}
			else
			{
				console.log("WTFFF");
				console.log(data);
			}
		}


	}]);
})(exambae);

(function(app) {
	app.controller('viewexamController', ['$scope', '$stateParams', 'ExamFactory', function($scope, $stateParams, ExamFactory) {

		console.log($stateParams);

		var vm = this;
		vm.loading = true;

		vm.exam = {};


		if('examId' in $stateParams)
		{
			ExamFactory.getExam($stateParams.examId).then(updateExam);
		}

		function updateExam(data)
		{
			vm.exam = data;
			console.log(data);
			vm.loading = false;

			vm.downloadLink = ExamFactory.getBlobDownloadUrl(vm.exam.file);
		}


	}]);
})(exambae);

(function(app) {
	app.directive('errorDirective', [ function() {
		return {
			scope: {},
			controller: function($scope, $element, $attrs, $transclude) {
				var numberOfTexts = 2;
				var randomTextNumber = Math.floor(Math.random() * numberOfTexts);

				var numberOfGiphies = 7;
				var randomGiphyNumber = Math.floor(Math.random() * numberOfGiphies);
				$scope.random = randomGiphyNumber;
				$scope.randomText = randomTextNumber;
			},
			// require: 'ngModel',
			// restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			 templateUrl: 'partials/error-view-partial.html',
			// replace: true,
			// transclude: true,
			link: function($scope, elem, attrs, controller) {}
		};
	}]);
})(exambae);

(function(app) {
	app.directive('examDirective', [ function() {
		return {
			scope: {
				exam: '='
			},
			controller: function($scope, $element, $attrs, $transclude) {

				$scope.uploadFile = function(){
				console.log("uploading");
            	var file = $scope.blob;

            }
		},
			// require: 'ngModel',
			//restrict: 'EA', // E = Element, A = Attribute, C = Class, M = Comment
			//template: '<h1>Heyyy this a directive</h1>',
			templateUrl: 'partials/exam-directive.html',
			replace: true,
			// transclude: true,
			link: function($scope, elem, attrs, controller) {
				
				
			}
		};
	}]);
})(exambae);

(function(app) {
	app.directive('loadingDirective', [function() {
		return {
			scope: {},
			controller: function($scope, $element, $attrs, $transclude) {
				var numberOfTexts = 2;
				var randomTextNumber = Math.floor(Math.random() * numberOfTexts);

				var numberOfGiphies = 8;
				var randomGiphyNumber = Math.floor(Math.random() * numberOfGiphies);
				$scope.random = randomGiphyNumber;
				$scope.randomText = randomTextNumber;
			},
			// require: 'ngModel',
			// restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			 templateUrl: 'partials/loading-view-partial.html',
			// replace: true,
			// transclude: true,
			link: function($scope, elem, attrs, controller) {}
		};
	}]);
})(exambae);

(function(app) {
	app.directive('successDirective', [ function() {
		return {
			scope: {},
			controller: function($scope, $element, $attrs, $transclude) {
				var numberOfTexts = 2;
				var randomTextNumber = Math.floor(Math.random() * numberOfTexts);

				var numberOfGiphies = 7;
				var randomGiphyNumber = Math.floor(Math.random() * numberOfGiphies);
				$scope.random = randomGiphyNumber;
				$scope.randomText = randomTextNumber;
			},
			// require: 'ngModel',
			// restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			 templateUrl: 'partials/success-view-partial.html',
			// replace: true,
			// transclude: true,
			link: function($scope, elem, attrs, controller) {}
		};
	}]);
})(exambae);
